rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Function to check if the authenticated user has an 'Admin' role.
    function is_admin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users_data/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users_data/$(request.auth.uid)).data.role == 'Admin';
    }

    // Helper function to check if the request is from an authenticated user.
    function is_authenticated() {
      return request.auth != null;
    }

    // Helper function to get the expected index ID for price books
    function getPriceBookIndexId(normalizedName, normalizedCurrency) {
      return normalizedName + '_' + normalizedCurrency;
    }

    // Helper function to validate an incoming client-generated Timestamp object (which is a map) or null
    function isValidTimestampOrNull(data) {
      return data == null || data is timestamp;
    }

    // Helper function to get the list of allowed services (used by multi-select for Opportunities and Leads)
    function getAllowedServicesList() {
      return [
        'Save the Day', 'Pre-Wedding Photo Shoot', 'Wedding',
        'Post-Wedding Photo Shoot', 'Baby Shower', 'Corporate Event',
        'Product Launch', 'Political Meeting', 'Others'
      ];
    }

    // Helper function for validating a list of services (for multi-select fields)
    function isValidServicesInterestedList(services) {
      let allowedServices = getAllowedServicesList();

      return services is list &&
             services.size() > 0 && // Ensure at least one service is selected
             services.hasOnly(allowedServices); // Ensures all elements in 'services' are present in 'allowedServices'
    }

    // Helper function to get the list of allowed work log types
    function getAllowedWorkLogTypes() {
      return ['Call', 'Email', 'Meeting', 'Task', 'Site Visit', 'Follow-up', 'Other'];
    }

    // --- 1. Rules for the 'users_data' collection: ---
    match /users_data/{userId} {
      allow read: if is_authenticated() && (request.auth.uid == userId || is_admin());
      allow create: if is_authenticated() &&
                            request.auth.uid == userId &&
                            request.resource.data.email == request.auth.token.email &&
                            request.resource.data.role == 'Standard' &&
                            request.resource.data.createdAt is timestamp &&
                            request.resource.data.createdAt <= request.time &&
                            request.resource.data.lastLogin is timestamp &&
                            request.resource.data.lastLogin <= request.time &&
                            request.resource.data.displayName is string &&
                            request.resource.data.keys().hasAll(['displayName', 'email', 'role', 'createdAt', 'lastLogin']) &&
                            request.resource.data.keys().size() == 5; // Strict check for new user data
      allow update: if is_authenticated() && (request.auth.uid == userId || is_admin()) &&
                            resource.data.createdAt == request.resource.data.createdAt && // Existing createdAt should not change
                            request.resource.data.email == resource.data.email && // Email should not change
                            request.resource.data.lastLogin is timestamp &&
                            request.resource.data.lastLogin <= request.time &&
                            (is_admin() || (request.resource.data.role == resource.data.role)); // Only admin can change role
      allow delete: if false; // Users_data should generally not be deleted by clients
    }

    // --- 2. Rules for 'customers' collection: ---
    match /customers/{customerId} {
      function is_customer_owner() {
        return resource.data.creatorId == request.auth.uid;
      }
      allow read: if is_authenticated(); // All authenticated users can read all customers (for dropdowns)
      allow create: if is_authenticated() &&
                            request.resource.data.creatorId == request.auth.uid &&
                            request.resource.data.type is string && request.resource.data.type in ['Individual', 'Business'] &&
                            request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                            request.resource.data.email is string &&
                            request.resource.data.phone is string &&
                            request.resource.data.address is string &&
                            request.resource.data.country is string &&
                            request.resource.data.preferredContactMethod is string && request.resource.data.preferredContactMethod in ['Email', 'Phone', 'SMS'] &&
                            request.resource.data.industry is string && request.resource.data.industry in ['Technology', 'Healthcare', 'Finance', 'Retail', 'Education', 'Other'] &&
                            request.resource.data.additionalDetails is string &&
                            request.resource.data.source is string && request.resource.data.source in ['Website', 'Referral', 'Advertisement', 'Social Media', 'Event', 'Other'] &&
                            request.resource.data.active is bool &&
                            request.resource.data.createdAt is timestamp &&
                            request.resource.data.createdAt <= request.time &&
                            request.resource.data.updatedAt is timestamp &&
                            request.resource.data.updatedAt <= request.time;
      allow update: if is_authenticated() && (is_customer_owner() || is_admin()) &&
                            request.resource.data.creatorId == resource.data.creatorId && // CreatorId cannot change
                            request.resource.data.updatedAt is timestamp &&
                            request.resource.data.updatedAt <= request.time &&
                            resource.data.createdAt == request.resource.data.createdAt; // createdAt cannot change
      allow delete: if is_authenticated() && (is_customer_owner() || is_admin());
    }

    // --- 3. Rules for 'opportunities' collection: ---
    match /opportunities/{opportunityId} {
      function is_opportunity_owner() {
        return resource.data.creatorId == request.auth.uid;
      }

      // Helper for Opportunity Net calculation validation
      function isValidOpportunityNet(value, discount, adjustment, net) {
        let calculatedNet = value - (value * discount * 0.01) - adjustment;
        return net >= 0 && (net == calculatedNet || (net - calculatedNet).abs() < 0.01);
      }

      allow read: if is_authenticated() && (is_opportunity_owner() || is_admin());

      allow create: if is_authenticated() &&
                            request.resource.data.creatorId == request.auth.uid &&
                            request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                            request.resource.data.customerId is string && request.resource.data.customerId.size() > 0 &&
                            request.resource.data.customerName is string && request.resource.data.customerName.size() > 0 &&
                            request.resource.data.currency is string && request.resource.data.currency.size() > 0 &&
                            request.resource.data.priceBookId is string &&
                            isValidTimestampOrNull(request.resource.data.expectedStartDate) &&
                            isValidTimestampOrNull(request.resource.data.expectedCloseDate) &&
                            request.resource.data.salesStage is string && request.resource.data.salesStage in ['Prospect', 'Qualification', 'Proposal', 'Negotiation', 'Won', 'Lost'] &&
                            isValidServicesInterestedList(request.resource.data.servicesInterested) &&
                            request.resource.data.probability is number && request.resource.data.probability >= 0 && request.resource.data.probability <= 100 &&
                            request.resource.data.value is number && request.resource.data.value >= 0 &&
                            request.resource.data.opportunityDiscount is number && request.resource.data.opportunityDiscount >= 0 && request.resource.data.opportunityDiscount <= 100 &&
                            request.resource.data.adjustmentAmt is number &&
                            request.resource.data.opportunityNet is number && request.resource.data.opportunityNet >= 0 &&
                            isValidOpportunityNet(
                                request.resource.data.value,
                                request.resource.data.opportunityDiscount,
                                request.resource.data.adjustmentAmt,
                                request.resource.data.opportunityNet
                            ) &&
                            request.resource.data.notes is string &&
                            request.resource.data.createdAt is timestamp &&
                            request.resource.data.createdAt <= request.time &&
                            request.resource.data.updatedAt is timestamp &&
                            request.resource.data.updatedAt <= request.time;

      allow update: if is_authenticated() && (is_opportunity_owner() || is_admin()) &&
                            request.resource.data.creatorId == resource.data.creatorId && // creatorId cannot change on update
                            request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                            request.resource.data.customerId is string && request.resource.data.customerId.size() > 0 &&
                            request.resource.data.customerName is string && request.resource.data.customerName.size() > 0 &&
                            request.resource.data.currency is string && request.resource.data.currency.size() > 0 &&
                            request.resource.data.priceBookId is string &&
                            isValidTimestampOrNull(request.resource.data.expectedStartDate) &&
                            isValidTimestampOrNull(request.resource.data.expectedCloseDate) &&
                            request.resource.data.salesStage is string && request.resource.data.salesStage in ['Prospect', 'Qualification', 'Proposal', 'Negotiation', 'Won', 'Lost'] &&
                            isValidServicesInterestedList(request.resource.data.servicesInterested) &&
                            request.resource.data.probability is number && request.resource.data.probability >= 0 && request.resource.data.probability <= 100 &&
                            request.resource.data.value is number && request.resource.data.value >= 0 &&
                            request.resource.data.opportunityDiscount is number && request.resource.data.opportunityDiscount >= 0 && request.resource.data.opportunityDiscount <= 100 &&
                            request.resource.data.adjustmentAmt is number &&
                            request.resource.data.opportunityNet is number && request.resource.data.opportunityNet >= 0 &&
                            isValidOpportunityNet(
                                request.resource.data.value,
                                request.resource.data.opportunityDiscount,
                                request.resource.data.adjustmentAmt,
                                request.resource.data.opportunityNet
                            ) &&
                            request.resource.data.notes is string &&
                            resource.data.createdAt == request.resource.data.createdAt && // createdAt cannot change
                            request.resource.data.updatedAt is timestamp &&
                            request.resource.data.updatedAt <= request.time;

      allow delete: if is_authenticated() && (is_opportunity_owner() || is_admin());

      // NEW: Rules for 'workLogs' subcollection within 'opportunities'
      match /workLogs/{workLogId} {
        // Helper to check if the user is the creator of the parent opportunity or an admin
        function is_parent_opportunity_owner_or_admin() {
          return is_admin() || (
            exists(/databases/$(database)/documents/opportunities/$(opportunityId)) &&
            get(/databases/$(database)/documents/opportunities/$(opportunityId)).data.creatorId == request.auth.uid
          );
        }

        // Read: Any authenticated user can read work logs if they are the opportunity creator or an Admin.
        allow read: if is_authenticated() && is_parent_opportunity_owner_or_admin();

        // Create: Any authenticated user can create work logs if they are the opportunity creator or an Admin.
        // The work log's creatorId must match the authenticated user's UID.
        allow create: if is_authenticated()
                      && is_parent_opportunity_owner_or_admin()
                      && request.resource.data.creatorId == request.auth.uid
                      && request.resource.data.date is timestamp &&
                      request.resource.data.type is string && request.resource.data.type.size() > 0 &&
                      request.resource.data.type in getAllowedWorkLogTypes() && // Use helper function
                      request.resource.data.details is string &&
                      request.resource.data.createdAt is timestamp &&
                      request.resource.data.createdAt <= request.time &&
                      request.resource.data.updatedAt is timestamp &&
                      request.resource.data.updatedAt <= request.time;

        // Update: ONLY Admin users can update work logs.
        // For update, ensure createdAt and creatorId are not changed.
        allow update: if is_admin()
                      && request.resource.data.createdAt == resource.data.createdAt
                      && request.resource.data.creatorId == resource.data.creatorId
                      && request.resource.data.date is timestamp
                      && request.resource.data.type is string && request.resource.data.type.size() > 0 &&
                      request.resource.data.type in getAllowedWorkLogTypes() && // Use helper function
                      request.resource.data.details is string &&
                      request.resource.data.updatedAt is timestamp &&
                      request.resource.data.updatedAt <= request.time;

        // Delete: ONLY Admin users can delete work logs.
        allow delete: if is_admin();
      }
    }

    // --- 4. Rules for App Metadata Collections (Settings, Countries, Currencies, Price Books): ---

    // Global settings for the app (single document)
    match /settings/{documentId} {
      allow read: if is_authenticated();
      allow write: if is_admin();
    }

    // Countries data (for dropdowns)
    match /countries/{documentId} {
      allow read: if is_authenticated();
      allow write: if is_admin();
    }

    // Currency data (for dropdowns)
    match /currencies/{documentId} {
      allow read: if is_authenticated();
      allow create, update, delete: if is_admin();
    }

    // Price Book data (for actual priceBook documents)
    match /priceBooks/{documentId} {
      allow read: if is_authenticated();
      allow create: if is_admin() &&
                            request.resource.data.keys().hasAll([
                                'name', 'normalizedName', 'description', 'currency', 'normalizedCurrency', 'isActive', 'createdAt', 'updatedAt'
                            ]) &&
                            request.resource.data.keys().hasOnly([
                                'name', 'normalizedName', 'description', 'currency', 'normalizedCurrency', 'isActive', 'createdAt', 'updatedAt'
                            ]) &&
                            request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                            request.resource.data.normalizedName is string && request.resource.data.normalizedName.size() > 0 &&
                            request.resource.data.description is string &&
                            request.resource.data.currency is string && request.resource.data.currency.size() > 0 &&
                            request.resource.data.normalizedCurrency is string && request.resource.data.normalizedCurrency.size() > 0 &&
                            request.resource.data.isActive is bool &&
                            request.resource.data.normalizedName == request.resource.data.name.lower().replace(' ', '') &&
                            !request.resource.data.normalizedName.matches('.*\\s.*') && // No spaces
                            request.resource.data.normalizedCurrency == request.resource.data.currency.lower().replace(' ', '') &&
                            !request.resource.data.normalizedCurrency.matches('.*\\s.*') && // No spaces
                            request.resource.data.createdAt is timestamp &&
                            request.resource.data.createdAt <= request.time &&
                            request.resource.data.updatedAt is timestamp &&
                            request.resource.data.updatedAt <= request.time;
      allow update: if is_admin() &&
                            request.resource.data.keys().hasAll([
                                'name', 'normalizedName', 'description', 'currency', 'normalizedCurrency', 'isActive', 'createdAt', 'updatedAt'
                            ]) &&
                            request.resource.data.keys().hasOnly([
                                'name', 'normalizedName', 'description', 'currency', 'normalizedCurrency', 'isActive', 'createdAt', 'updatedAt'
                            ]) &&
                            request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                            request.resource.data.normalizedName is string && request.resource.data.normalizedName.size() > 0 &&
                            request.resource.data.description is string &&
                            request.resource.data.currency is string && request.resource.data.currency.size() > 0 &&
                            request.resource.data.normalizedCurrency is string && request.resource.data.normalizedCurrency.size() > 0 &&
                            request.resource.data.isActive is bool &&
                            request.resource.data.normalizedName == resource.data.normalizedName && // normalizedName should not change on update
                            !request.resource.data.normalizedName.matches('.*\\s.*') && // No spaces
                            request.resource.data.normalizedCurrency == resource.data.normalizedCurrency && // normalizedCurrency should not change on update
                            !request.resource.data.normalizedCurrency.matches('.*\\s.*') && // No spaces
                            resource.data.createdAt == request.resource.data.createdAt && // createdAt cannot change
                            request.resource.data.updatedAt is timestamp &&
                            request.resource.data.updatedAt <= request.time;
      allow delete: if is_admin();
    }

    // --- NEW COLLECTION: 'quotes' ---
match /quotes/{quoteId} {
  // Read Rule: Admin can read all, standard users can read quotes tied to opportunities they own.
  allow read: if is_authenticated() && (
                    is_admin() ||
                    (resource.data.opportunityId != null &&
                     exists(/databases/$(database)/documents/opportunities/$(resource.data.opportunityId)) &&
                     get(/databases/$(database)/documents/opportunities/$(resource.data.opportunityId)).data.creatorId == request.auth.uid)
                  );

  // Create Rule: Only Admin can create quotes.
  allow create: if is_admin() &&
                    request.resource.data.quoteName is string && request.resource.data.quoteName.size() > 0 &&
                    request.resource.data.opportunityId is string && request.resource.data.opportunityId.size() > 0 &&
                    // Validate opportunity exists and has salesStage 'Won'
                    exists(/databases/$(database)/documents/opportunities/$(request.resource.data.opportunityId)) &&
                    get(/databases/$(database)/documents/opportunities/$(request.resource.data.opportunityId)).data.salesStage == 'Won' &&
                    // Customer details are copied, so just validate their type and presence
                    request.resource.data.customerContactName is string &&
                    request.resource.data.phone is string &&
                    request.resource.data.email is string &&
                    request.resource.data.customerAddress is string &&
                    request.resource.data.eventName is string && request.resource.data.eventName.size() > 0 &&
                    isValidTimestampOrNull(request.resource.data.eventDate) &&
                    request.resource.data.additionalDetails is string &&
                    request.resource.data.quoteAmount is number && request.resource.data.quoteAmount >= 0 &&
                    request.resource.data.quoteDiscount is number && request.resource.data.quoteDiscount >= 0 &&
                    request.resource.data.quoteAdjustment is number &&
                    request.resource.data.quoteNetAmount is number && request.resource.data.quoteNetAmount >= 0 &&
                    request.resource.data.status is string && request.resource.data.status in ['Draft', 'Review', 'Finalized'] &&
                    request.resource.data.creatorId == request.auth.uid &&
                    request.resource.data.createdAt is timestamp && request.resource.data.createdAt <= request.time &&
                    request.resource.data.updatedAt is timestamp && request.resource.data.updatedAt <= request.time;

  // --- FIX: Update Rule: Allow Admin OR the creator of the quote to update.
  allow update: if (is_admin() || (resource.data.creatorId == request.auth.uid)) &&
                    // Ensure core fields don't change
                    request.resource.data.creatorId == resource.data.creatorId &&
                    request.resource.data.createdAt == resource.data.createdAt &&
                    request.resource.data.opportunityId == resource.data.opportunityId && // Opportunity cannot change after creation
                    // Validate customer details (copied fields) - just check type
                    request.resource.data.customerContactName is string &&
                    request.resource.data.phone is string &&
                    request.resource.data.email is string &&
                    request.resource.data.customerAddress is string &&
                    // Validate other fields
                    request.resource.data.quoteName is string && request.resource.data.quoteName.size() > 0 &&
                    request.resource.data.eventName is string && request.resource.data.eventName.size() > 0 &&
                    isValidTimestampOrNull(request.resource.data.eventDate) &&
                    request.resource.data.additionalDetails is string &&
                    request.resource.data.quoteAmount is number && request.resource.data.quoteAmount >= 0 &&
                    request.resource.data.quoteDiscount is number && request.resource.data.quoteDiscount >= 0 &&
                    request.resource.data.quoteAdjustment is number &&
                    request.resource.data.quoteNetAmount is number && request.resource.data.quoteNetAmount >= 0 &&
                    request.resource.data.status is string && request.resource.data.status in ['Draft', 'Review', 'Finalized'] &&
                    request.resource.data.updatedAt is timestamp &&
                    request.resource.data.updatedAt <= request.time;

  // Delete Rule: Only Admin can delete quotes.
  allow delete: if is_admin();
  
  // Rules for 'quoteLines' subcollection within 'quotes'
  match /quoteLines/{quoteLineId} {
    // Helper function to check if the user is the creator of the parent quote or an admin
    function is_parent_quote_owner_or_admin() {
      return is_admin() || (
        exists(/databases/$(database)/documents/quotes/$(quoteId)) &&
        get(/databases/$(database)/documents/quotes/$(quoteId)).data.creatorId == request.auth.uid
      );
    }

    // Read: Only the parent quote owner or admin can read quote lines.
    allow read: if is_authenticated() && is_parent_quote_owner_or_admin();

    // Create: Only the parent quote owner or admin can create quote lines.
    allow create: if is_authenticated() && is_parent_quote_owner_or_admin() &&
                        request.resource.data.services is string && request.resource.data.services.size() > 0 &&
                        request.resource.data.serviceDescription is string &&
                        isValidTimestampOrNull(request.resource.data.serviceStartDate) &&
                        isValidTimestampOrNull(request.resource.data.serviceEndDate) &&
                        request.resource.data.unitPrice is number && request.resource.data.unitPrice >= 0 &&
                        request.resource.data.quantity is number && request.resource.data.quantity >= 0 &&
                        request.resource.data.discount is number && request.resource.data.discount >= 0 && request.resource.data.discount <= 100 &&
                        request.resource.data.adjustmentAmount is number &&
                        request.resource.data.finalNet is number && request.resource.data.finalNet >= 0 &&
                        // Validate Final Net calculation
                        (request.resource.data.finalNet == (request.resource.data.unitPrice * request.resource.data.quantity - (request.resource.data.unitPrice * request.resource.data.quantity * request.resource.data.discount / 100.0) - request.resource.data.adjustmentAmount) ||
                         (request.resource.data.finalNet - (request.resource.data.unitPrice * request.resource.data.quantity - (request.resource.data.unitPrice * request.resource.data.quantity * request.resource.data.discount / 100.0) - request.resource.data.adjustmentAmount)).abs() < 0.01) &&
                        request.resource.data.createdAt is timestamp &&
                        request.resource.data.createdAt <= request.time &&
                        request.resource.data.updatedAt is timestamp &&
                        request.resource.data.updatedAt <= request.time;


    // Update: Only the parent quote owner or admin can update quote lines.
    allow update: if is_authenticated() && is_parent_quote_owner_or_admin() &&
                        request.resource.data.services is string && request.resource.data.services.size() > 0 &&
                        request.resource.data.serviceDescription is string &&
                        isValidTimestampOrNull(request.resource.data.serviceStartDate) &&
                        isValidTimestampOrNull(request.resource.data.serviceEndDate) &&
                        request.resource.data.unitPrice is number && request.resource.data.unitPrice >= 0 &&
                        request.resource.data.quantity is number && request.resource.data.quantity >= 0 &&
                        request.resource.data.discount is number && request.resource.data.discount >= 0 && request.resource.data.discount <= 100 &&
                        request.resource.data.adjustmentAmount is number &&
                        request.resource.data.finalNet is number && request.resource.data.finalNet >= 0 &&
                        // Validate Final Net calculation
                        (request.resource.data.finalNet == (request.resource.data.unitPrice * request.resource.data.quantity - (request.resource.data.unitPrice * request.resource.data.quantity * request.resource.data.discount / 100.0) - request.resource.data.adjustmentAmount) ||
                         (request.resource.data.finalNet - (request.resource.data.unitPrice * request.resource.data.quantity - (request.resource.data.unitPrice * request.resource.data.quantity * request.resource.data.discount / 100.0) - request.resource.data.adjustmentAmount)).abs() < 0.01) &&
                        resource.data.createdAt == request.resource.data.createdAt && // createdAt cannot change
                        request.resource.data.updatedAt is timestamp &&
                        request.resource.data.updatedAt <= request.time;


    // Delete: Only the parent quote owner or admin can delete quote lines.
    allow delete: if is_authenticated() && is_parent_quote_owner_or_admin();
  }
}


match /GeneratedDocuments/{documentId} {
  // Allow only Admin users to create documents.
  // Validate that the required fields are present and are of the correct type.
  allow create: if is_authenticated() &&
                is_admin() &&
                request.resource.data.keys().hasAll([
                  'documentType',
                  'documentKey',
                  'documentURL',
                  'createdAt',
                  'createdBy',
                  'content'
                ]) &&
                request.resource.data.keys().hasOnly([
                  'documentType',
                  'documentKey',
                  'documentURL',
                  'createdAt',
                  'createdBy',
                  'content'
                ]) &&
                request.resource.data.documentType is string &&
                request.resource.data.documentKey is string &&
                request.resource.data.documentURL is string &&
                request.resource.data.createdBy is string &&
                request.resource.data.createdBy == request.auth.uid &&
                request.resource.data.content is string &&
                request.resource.data.createdAt is timestamp &&
                request.resource.data.createdAt <= request.time;

  // Allow Admin users to read and delete documents.
  allow read, delete: if is_authenticated() && is_admin();
}


    // --- NEW COLLECTION: 'leads' ---
    match /leads/{leadId} {
      function is_lead_owner() {
        return resource.data.creatorId == request.auth.uid;
      }

      // Read: Any authenticated user can read leads they created, or an Admin can read all.
      allow read: if is_authenticated() && (is_lead_owner() || is_admin());

      // Create: Any authenticated user can create a lead, but must be the creator.
      allow create: if is_authenticated() &&
                            request.auth.uid == request.resource.data.creatorId &&
                            request.resource.data.keys().hasAll([
                              'contactName', 'phone', 'email', 'servicesInterested', 'eventDate',
                              'source', 'additionalDetails', 'createdAt', 'updatedAt', 'creatorId'
                            ]) &&
                            request.resource.data.keys().hasOnly([
                              'contactName', 'phone', 'email', 'servicesInterested', 'eventDate',
                              'source', 'additionalDetails', 'createdAt', 'updatedAt', 'creatorId'
                            ]) &&
                            request.resource.data.contactName is string && request.resource.data.contactName.size() > 0 &&
                            request.resource.data.phone is string &&
                            request.resource.data.email is string &&
                            isValidServicesInterestedList(request.resource.data.servicesInterested) &&
                            isValidTimestampOrNull(request.resource.data.eventDate) &&
                            request.resource.data.source is string && request.resource.data.source.size() > 0 &&
                            request.resource.data.source in ['Website', 'Referral', 'Social Media', 'Advertisement', 'Event', 'Others'] &&
                            request.resource.data.additionalDetails is string &&
                            request.resource.data.createdAt is timestamp &&
                            request.resource.data.createdAt <= request.time &&
                            request.resource.data.updatedAt is timestamp &&
                            request.resource.data.updatedAt <= request.time;

      // Update: Owner or Admin can update. CreatorId must remain unchanged.
      allow update: if is_authenticated() && (is_lead_owner() || is_admin()) &&
                            request.resource.data.creatorId == resource.data.creatorId &&
                            request.resource.data.contactName is string && request.resource.data.contactName.size() > 0 &&
                            request.resource.data.phone is string &&
                            request.resource.data.email is string &&
                            isValidServicesInterestedList(request.resource.data.servicesInterested) &&
                            isValidTimestampOrNull(request.resource.data.eventDate) &&
                            request.resource.data.source is string && request.resource.data.source.size() > 0 &&
                            request.resource.data.source in ['Website', 'Referral', 'Social Media', 'Advertisement', 'Event', 'Others'] &&
                            request.resource.data.additionalDetails is string &&
                            resource.data.createdAt == request.resource.data.createdAt &&
                            request.resource.data.updatedAt is timestamp &&
                            request.resource.data.updatedAt <= request.time;

      // Delete: Owner or Admin can delete.
      allow delete: if is_authenticated() && (is_lead_owner() || is_admin());
    }
  }
}
